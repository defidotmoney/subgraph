type AccountWeightUpdated @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  epoch: BigInt! # uint256
  timestamp: BigInt! # uint256
  newWeight: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovedUnstakerSet @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  caller: Bytes! # address
  isApproved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LocksDisabled @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Staked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  epoch: BigInt! # uint256
  amount: BigInt! # uint256
  weightAdded: BigInt! # uint256
  isLocked: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unstaked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  epoch: BigInt! # uint256
  amount: BigInt! # uint256
  weightRemoved: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AddMarket @entity(immutable: true) {
  id: Bytes!
  collateral: Bytes! # address
  market: Bytes! # address
  amm: Bytes! # address
  mp_idx: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetDelegateApproval @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  delegate: Bytes! # address
  is_approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetDelegationEnabled @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  is_enabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetProtocolEnabled @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  is_enabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetImplementations @entity(immutable: true) {
  id: Bytes!
  A: BigInt! # uint256
  amm: Bytes! # address
  market: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddMarketHook @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  hook: Bytes! # address
  hook_type: BigInt! # uint256
  active_hooks: [Boolean!]! # bool[4]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveMarketHook @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  hook: Bytes! # address
  hook_debt_released: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type HookDebtAjustment @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  hook: Bytes! # address
  adjustment: BigInt! # int256
  new_hook_debt: BigInt! # uint256
  new_total_hook_debt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddMonetaryPolicy @entity(immutable: true) {
  id: Bytes!
  mp_idx: BigInt! # uint256
  monetary_policy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangeMonetaryPolicy @entity(immutable: true) {
  id: Bytes!
  mp_idx: BigInt! # uint256
  monetary_policy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangeMonetaryPolicyForMarket @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  mp_idx: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetGlobalMarketDebtCeiling @entity(immutable: true) {
  id: Bytes!
  debt_ceiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetPegKeeperRegulator @entity(immutable: true) {
  id: Bytes!
  regulator: Bytes! # address
  with_migration: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreateLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  account: Bytes! # address
  caller: Bytes! # address
  coll_amount: BigInt! # uint256
  debt_amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AdjustLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  account: Bytes! # address
  caller: Bytes! # address
  coll_adjustment: BigInt! # int256
  debt_adjustment: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CloseLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  account: Bytes! # address
  caller: Bytes! # address
  coll_withdrawn: BigInt! # uint256
  debt_withdrawn: BigInt! # uint256
  debt_repaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LiquidateLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  liquidator: Bytes! # address
  account: Bytes! # address
  coll_received: BigInt! # uint256
  debt_received: BigInt! # uint256
  debt_repaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectAmmFees @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  amm_coll_fees: BigInt! # uint256
  amm_debt_fees: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectFees @entity(immutable: true) {
  id: Bytes!
  minted: BigInt! # uint256
  redeemed: BigInt! # uint256
  total_debt: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
