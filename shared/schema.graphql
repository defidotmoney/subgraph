# Controller 

type AddMarket @entity(immutable: true) {
  id: Bytes!
  collateral: Bytes! # address
  market: Bytes! # address
  amm: Bytes! # address
  mp_idx: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetDelegateApproval @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  delegate: Bytes! # address
  is_approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetDelegationEnabled @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  is_enabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetProtocolEnabled @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  is_enabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetImplementations @entity(immutable: true) {
  id: Bytes!
  A: BigInt! # uint256
  amm: Bytes! # address
  market: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddMarketHook @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  hook: Bytes! # address
  hook_type: BigInt! # uint256
  active_hooks: [Boolean!]! # bool[4]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveMarketHook @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  hook: Bytes! # address
  hook_debt_released: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type HookDebtAjustment @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  hook: Bytes! # address
  adjustment: BigInt! # int256
  new_hook_debt: BigInt! # uint256
  new_total_hook_debt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddMonetaryPolicy @entity(immutable: true) {
  id: Bytes!
  mp_idx: BigInt! # uint256
  monetary_policy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangeMonetaryPolicy @entity(immutable: true) {
  id: Bytes!
  mp_idx: BigInt! # uint256
  monetary_policy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangeMonetaryPolicyForMarket @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  mp_idx: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetGlobalMarketDebtCeiling @entity(immutable: true) {
  id: Bytes!
  debt_ceiling: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetPegKeeperRegulator @entity(immutable: true) {
  id: Bytes!
  regulator: Bytes! # address
  with_migration: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreateLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  account: Bytes! # address
  caller: Bytes! # address
  coll_amount: BigInt! # uint256
  debt_amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AdjustLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  account: Bytes! # address
  caller: Bytes! # address
  coll_adjustment: BigInt! # int256
  debt_adjustment: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CloseLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  account: Bytes! # address
  caller: Bytes! # address
  coll_withdrawn: BigInt! # uint256
  debt_withdrawn: BigInt! # uint256
  debt_repaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LiquidateLoan @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  liquidator: Bytes! # address
  account: Bytes! # address
  coll_received: BigInt! # uint256
  debt_received: BigInt! # uint256
  debt_repaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectAmmFees @entity(immutable: true) {
  id: Bytes!
  market: Bytes! # address
  amm_coll_fees: BigInt! # uint256
  amm_debt_fees: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectFees @entity(immutable: true) {
  id: Bytes!
  minted: BigInt! # uint256
  redeemed: BigInt! # uint256
  total_debt: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# sMoney

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BridgeEnabledSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  isEnabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Cooldown @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  cooldownEnd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CooldownDurationUpdated @entity(immutable: true) {
  id: Bytes!
  cooldownDuration: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EnforcedOptionSet @entity(immutable: true) {
  id: Bytes!
  _enforcedOptions: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeAggregatorSet @entity(immutable: true) {
  id: Bytes!
  feeAggregator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovStakerSet @entity(immutable: true) {
  id: Bytes!
  govStaker: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MsgInspectorSet @entity(immutable: true) {
  id: Bytes!
  inspector: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewRewardPeriod @entity(immutable: true) {
  id: Bytes!
  day: BigInt! # uint256
  total: BigInt! # uint256
  stakerAmount: BigInt! # uint256
  govAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NotifyNewFees @entity(immutable: true) {
  id: Bytes!
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OFTReceived @entity(immutable: true) {
  id: Bytes!
  guid: Bytes! # bytes32
  srcEid: BigInt! # uint32
  toAddress: Bytes! # address
  amountReceivedLD: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OFTSent @entity(immutable: true) {
  id: Bytes!
  guid: Bytes! # bytes32
  dstEid: BigInt! # uint32
  fromAddress: Bytes! # address
  amountSentLD: BigInt! # uint256
  amountReceivedLD: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PeerSet @entity(immutable: true) {
  id: Bytes!
  eid: BigInt! # uint32
  peer: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PreCrimeSet @entity(immutable: true) {
  id: Bytes!
  preCrimeAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardRegulatorSet @entity(immutable: true) {
  id: Bytes!
  regulator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unstake @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  receiver: Bytes! # address
  assets: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Custom Entities

type UserBalance @entity {
  id: Bytes! # user address
  balance: BigInt!
  lastUpdated: BigInt!
}
